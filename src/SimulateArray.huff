
/** 
 *  SUM_ARRAY HUFF EXERCISE
 *
 * In this puzzle, the task is to simulate an array in Huff using the "exact" storage pattern as solidity. Expected functions can; 
 *      - Push numbers onto a array, 
 *      - Pop the last index from the array,
 *      - View what's stored at an index, 
 *      - Gets the length of the array, 
 *      - Write to an index if it is valid.
 *
 *      - Writes and reads outside of length revert. 
 *      - Popping off a zero length array reverts.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function pushh(uint256 num) payable returns()
#define function popp() payable returns()
#define function read(uint256 index) payable returns(uint256)
#define function length() payable returns(uint256)
#define function write(uint256 index, uint256 num) payable returns()

#define error OutOfBounds()
#define error ZeroArray()

#define constant LENGTH = FREE_STORAGE_POINTER()

#define macro CHECK_OUT_OF_BOUNDS() = takes (1) returns (0) {
    [LENGTH] sload // [len, index]
    swap1 // [index, len]
    lt // index < len
    cont
    jumpi

    __ERROR(OutOfBounds) 0x00 mstore
    0x04 0x00 revert 

    cont:
}

#define macro CHECK_ZERO_ARRAY() = takes (1) returns (0) {
    0x00 // [len]
    lt // 0 < len
    pass
    jumpi

    __ERROR(ZeroArray) 0x00 mstore
    0x04 0x00 revert 

    pass:
}

#define macro STORAGE_AT() = takes (1) returns (1) {
    // [index]
    0x01 // [0x01, index]
    add // [index+1]
}

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload
    0xe0 shr

    dup1
    __FUNC_SIG(length)
    eq
    length jumpi

    dup1
    __FUNC_SIG(pushh)
    eq
    pushh jumpi

    dup1
    __FUNC_SIG(popp)
    eq
    popp jumpi

    dup1
    __FUNC_SIG(read)
    eq
    read jumpi

    dup1
    __FUNC_SIG(write)
    eq
    write jumpi

    // --------- fallback ----------
    0x00 0x00 revert


    // --------- length ----------
    length:
    [LENGTH] sload
    0x00 mstore
    0x20 0x00 return

    // --------- pushh ----------
    pushh:
    [LENGTH] sload
    0x01
    add
    dup1
    0x00 sstore

    0x04 calldataload
    swap1
    sstore
    stop

    // --------- popp ----------
    popp:
    0x01
    [LENGTH] sload
    dup1
    CHECK_ZERO_ARRAY()
    sub
    [LENGTH] sstore

    // --------- read ----------
    read:
    0x04 calldataload // index
    dup1
    CHECK_OUT_OF_BOUNDS()

    STORAGE_AT() sload
    0x00 mstore
    0x20 0x00 return

    // --------- write ----------
    write:
    0x04 calldataload // index
    dup1
    CHECK_OUT_OF_BOUNDS()
    STORAGE_AT()
    0x24 calldataload
    swap1
    sstore
    stop
}